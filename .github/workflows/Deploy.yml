name: Deploy
concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
#  cancel-in-progress: true
on:
  workflow_dispatch:
    inputs:
      m2-tag:
        description: 'M2 tag'     
        required: false
        type: text     
      pwa-tag:
        description: 'Pwa tag'     
        required: false
        type: text      
      vendor-update:
        description: 'Vendor update'
        type: boolean
      skip-suspense:
        description: 'Skip suspense'
        type: boolean
      maintenance:
          description: 'Maintenance'
          type: boolean
jobs:
  PrepareDeploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check enviroment
        id: branch_check
        run: |
          echo "Running on branch ${{ github.ref }}"
          if [ "${{ github.ref }}" = "refs/heads/live_01022021" ]; then
            echo "::set-output name=enviroment_name::live"
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            echo "::set-output name=enviroment_name::stage"
          else
            echo "::error ::Missing deploy enviroment"
            exit 1;
          fi
      - name: Check tags
        if: ${{ github.event.inputs.m2-tag == '' && github.event.inputs.pwa-tag == '' }}
        run: |
            echo "::error ::M2 and PWA tag is empty."
            exit 1; 
      - name: Deploy data
        run: |
              echo "::notice::Enviroment: ${{ steps.branch_check.outputs.enviroment_name }};" \
              "M2 Tag: ${{ github.event.inputs.m2-tag }};" \
              "PWA Tag: ${{ github.event.inputs.pwa-tag }};" \
              "Vendor update: ${{ github.event.inputs.vendor-update }};" \
              "Skip suspense: ${{ github.event.inputs.skip-suspense }};" \
              "Maintenance: ${{ github.event.inputs.maintenance }}" 
              
    outputs:
      enviroment_name: ${{ steps.branch_check.outputs.enviroment_name }}
  Deploy:
    runs-on: ubuntu-latest
    needs: PrepareDeploy
    name: "Deploy: ${{ needs.PrepareDeploy.outputs.enviroment_name }}"
    environment:
        name: ${{ needs.PrepareDeploy.outputs.enviroment_name }}     
    steps:
    
      - uses: actions/checkout@v2

      - name: TEMP List files
        run: ls -la
    
      - name: TEMP Show secret data
        run: |
          echo ${{ secrets.AWS_ACCESS_KEY_ID }} | sed "s/ /  /g"
          echo ${{ secrets.AWS_SECRET_ACCESS_KEY }} | sed "s/ /  /g"
          echo ${{ secrets.AWS_REGION }} | sed "s/ /  /g"
          echo ${{ secrets.AWS_VPC_NAME }} | sed "s/ /  /g"
          echo ${{ secrets.AWS_SCRIPTS_GROUP_NAME }} | sed "s/ /  /g"
          echo ${{ secrets.AWS_ADMIN_GROUP_NAME }} | sed "s/ /  /g"
          echo ${{ secrets.AWS_FRONTEND_GROUP_NAME }} | sed "s/ /  /g"
      
      - name: Show enviroment
        run: echo ${{ needs.PrepareDeploy.outputs.enviroment_name }}

 #     - name: Apt
 #       run: sudo apt-get update && sudo apt -y install mc rsync
    
 #     - name: Composer install
 #       run: curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

      - name: Composer install
        run: cd ./src && composer install
      
      - name: Prepare commands
        run: |
          PHP_DEPLOY_COMMAND="php deploy.php"
          if [[ ${{ github.event.inputs.m2-tag }} ]]; then
              PHP_DEPLOY_COMMAND+=" --m2-tag=${{ github.event.inputs.m2-tag }}"
          fi
          echo $PHP_DEPLOY_COMMAND;

      - name: Run php
        run: |
          cd ./src && 
          "php deploy.php \
          --m2-tag=${{ github.event.inputs.m2-tag }} \
          --pwa-tag=${{ github.event.inputs.pwa-tag }} \
          --maintenance=${{ github.event.inputs.maintenance }} \
          --vendor-update=${{ github.event.inputs.vendor-update }} \
          --skip-suspense=${{ github.event.inputs.skip-suspense }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_CONFIG_SET: ${{ secrets.AWS_CONFIG_SET }}
          AWS_VPC_NAME: ${{ secrets.AWS_VPC_NAME }}
          AWS_SCRIPTS_GROUP_NAME: ${{ secrets.AWS_SCRIPTS_GROUP_NAME }}
          AWS_ADMIN_GROUP_NAME: ${{ secrets.AWS_ADMIN_GROUP_NAME }}
          AWS_FRONTEND_GROUP_NAME: ${{ secrets.AWS_FRONTEND_GROUP_NAME }}
