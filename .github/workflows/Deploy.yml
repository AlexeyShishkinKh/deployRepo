name: Deploy
concurrency: 
  group: trololo_group_key
  cancel-in-progress: true
on:
  workflow_dispatch:
    inputs:
      m2-tag:
        description: 'M2 tag'     
        required: false
        type: text     
      pwa-tag:
        description: 'Pwa tag'     
        required: false
        type: text      
      vendor-update:
        description: 'Vendor update'
        type: boolean
      skip-suspense:
        description: 'Skip suspense'
        type: boolean
      maintenance:
          description: 'Maintenance'
          type: boolean
jobs:
  PrepareDeploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check enviroment
        id: branch_check
        run: |
          echo "Running on branch ${{ github.ref }}"
          if [ "${{ github.ref }}" = "refs/heads/live_01022021" ]; then
            echo "::set-output name=enviroment_name::live"
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            echo "::set-output name=enviroment_name::stage"
          else
            echo "::error ::Missing deploy enviroment"
            exit 1;
          fi
      - name: Check tags
        if: ${{ github.event.inputs.m2-tag == '' && github.event.inputs.pwa-tag == '' }}
        run: |
            echo "::error ::M2 and PWA tag is empty."
            exit 1; 
      - name: Deploy data
        run: |
              echo "::notice::Enviroment: ${{ steps.branch_check.outputs.enviroment_name }};" \
              "M2 Tag: ${{ github.event.inputs.m2-tag }};" \
              "PWA Tag: ${{ github.event.inputs.pwa-tag }};" \
              "Vendor update: ${{ github.event.inputs.vendor-update }};" \
              "Skip suspense: ${{ github.event.inputs.skip-suspense }};" \
              "Maintenance: ${{ github.event.inputs.maintenance }}" 
              
    outputs:
      enviroment_name: ${{ steps.branch_check.outputs.enviroment_name }}
  Deploy:
    runs-on: ubuntu-latest
    needs: PrepareDeploy
    name: "Deploy: ${{ needs.PrepareDeploy.outputs.enviroment_name }}"
    environment:
        name: ${{ needs.PrepareDeploy.outputs.enviroment_name }}     
    steps:
      - name: Show secret data
        run: |
          echo ${{ secrets.AWS_ACCESS_KEY_ID }} | sed "s/ /  /g"
          echo ${{ secrets.AWS_SECRET_ACCESS_KEY }} | sed "s/ /  /g"
          echo ${{ secrets.AWS_REGION }} | sed "s/ /  /g"
          echo ${{ secrets.AWS_VPC_NAME }} | sed "s/ /  /g"
          echo ${{ secrets.AWS_SCRIPTS_GROUP_NAME }} | sed "s/ /  /g"
          echo ${{ secrets.AWS_ADMIN_GROUP_NAME }} | sed "s/ /  /g"
          echo ${{ secrets.AWS_FRONTEND_GROUP_NAME }} | sed "s/ /  /g"
      
      - name: Show enviroment
        run: echo ${{ needs.PrepareDeploy.outputs.enviroment_name }}









  
      - uses: actions-cool/check-user-permission@v2
        id: check
        with:
          require: 'write'
          check-contributor: true



      - name: Get secret 1
        run: echo ${{ secrets.LIVE_SECRET }} | sed "s/ /=/g"

      - name: Get secret
        run: echo ${{ secrets.LIVE_SECRET }} | base64 >> file.log
          
      - name: Show file secret
        run: cat file.log | base64 -d | sed "s/ /=/g"
                        
      - name: Dump secrets.LIVE_SECRET
        run: echo '${{ secrets.LIVE_SECRET }}'
        
      - name: Dump TEST_SECRET
        run: echo '${{ secrets.TEST_SECRET }}'  
        
      - name: Dump GITHUB_TOKEN
        run: echo '${{ secrets.GITHUB_TOKEN }}'            
        
      - name: Dump steps check-user-permission
        run: echo '${{ toJSON(steps.check.outputs) }}'    
        
      - name: print warning
        run: echo "::notice file=app.js,line=1,col=5,endColumn=7::Missing semicolon"
      
#      - name: Reboot
#        continue-on-error: true
#        run: sudo reboot
 
      - name: Print GITHUB_REF_TYPE
        run: echo '$GITHUB_REF_TYPE'
        
      - name: Dump GitHub context
        id: github_context_step
        run: echo '${{ toJSON(github) }}'
        
      - name: Dump job context
        run: echo '${{ toJSON(job) }}'
        
      - name: Dump steps context
        run: echo '${{ toJSON(steps) }}'    
        
      - name: Dump runner context
        run: echo '${{ toJSON(runner) }}'
        
      - name: Dump strategy context
        run: echo '${{ toJSON(strategy) }}'
        
      - name: Dump matrix context
        run: echo '${{ toJSON(matrix) }}'
