name: Deploy aws
concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
on:
  workflow_dispatch:
    inputs:
      m2-tag:
        description: 'M2 tag'     
        required: false
        type: text     
      pwa-tag:
        description: 'Pwa tag'     
        required: false
        type: text      
      vendor-update:
        description: 'Vendor update'
        type: boolean
      skip-suspense:
        description: 'Skip suspense'
        type: boolean
      maintenance:
          description: 'Maintenance'
          type: boolean
jobs:
  AWSDeploy:
    runs-on: ubuntu-latest
    environment:
        name: stage
    steps:
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: ${{ always() }} # This ensures that your workflow runs successfully
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Show ec2 instances
        run: aws ec2 describe-instances --filters "Name=tag:Type,Values=deploy" "Name=instance-state-code,Values=16" --region ${{ secrets.AWS_REGION }}

      - name: Parse ec2 instances data
        run: |
          awsEc2Result=`aws ec2 describe-instances --filters "Name=tag:Type,Values=deploy" "Name=instance-state-code,Values=16" --region ${{ secrets.AWS_REGION }}`
          echo $awsEc2Result
          InstanceId=`echo $(jq -r '.Reservations[].Instances[].InstanceId' <<< "$awsEc2Result")`
          PublicIpAddress=`echo $(jq -r '.Reservations[].Instances[].PublicIpAddress' <<< "$awsEc2Result")`
          AvailabilityZone=`echo $(jq -r '.Reservations[].Instances[].Placement.AvailabilityZone' <<< "$awsEc2Result")`
          echo $InstanceId
          echo $PublicIpAddress
          echo $AvailabilityZone
          
      - name: Show instance id
        run: echo $InstanceId
          
