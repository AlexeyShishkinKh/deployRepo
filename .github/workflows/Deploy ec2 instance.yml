name: Deploy aws
concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
on:
  workflow_dispatch:
    inputs:
      m2-tag:
        description: 'M2 tag'     
        required: false
        type: text     
      pwa-tag:
        description: 'Pwa tag'     
        required: false
        type: text      
      vendor-update:
        description: 'Vendor update'
        type: boolean
      skip-suspense:
        description: 'Skip suspense'
        type: boolean
      maintenance:
          description: 'Maintenance'
          type: boolean
jobs:
  AWSDeploy:
    runs-on: ubuntu-latest
    environment:
        name: stage
    steps:
    
#
# Check tags
#
# Check concurency ?
#
    
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: ${{ always() }} # This ensures that your workflow runs successfully
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Show ec2 instances
        run: aws ec2 describe-instances --filters "Name=tag:Type,Values=deploy" "Name=instance-state-code,Values=16" --region ${{ secrets.AWS_REGION }}

      - name: Prepare ec2 deploy instance data
        id: ec2Data
        run: |
          awsEc2Result=`aws ec2 describe-instances --filters "Name=tag:Type,Values=deploy" "Name=instance-state-code,Values=16" --region ${{ secrets.AWS_REGION }}`
          InstanceId=`echo $(jq -r '.Reservations[].Instances[].InstanceId' <<< "$awsEc2Result")`
          PublicIpAddress=`echo $(jq -r '.Reservations[].Instances[].PublicIpAddress' <<< "$awsEc2Result")`
          AvailabilityZone=`echo $(jq -r '.Reservations[].Instances[].Placement.AvailabilityZone' <<< "$awsEc2Result")`
          echo "::set-output name=InstanceId::$InstanceId"
          echo "::set-output name=PublicIpAddress::$PublicIpAddress"
          echo "::set-output name=AvailabilityZone::$AvailabilityZone"
   
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          ssh-keygen -t rsa -b 4096 -C "github-deploy-key" -f ~/.ssh/ssh.key -N ''
          chmod 600 ~/.ssh/ssh.key
          cat >>~/.ssh/config <<END
            Host ec2instance
            HostName $SSH_HOST
            User ubuntu
            IdentityFile ~/.ssh/ssh.key
            StrictHostKeyChecking no
            IdentitiesOnly yes
            SetEnv AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            SetEnv AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            SetEnv AWS_REGION=${{ secrets.AWS_REGION }}
            SetEnv AWS_CONFIG_SET=stage
            SetEnv AWS_VPC_NAME=${{ secrets.AWS_VPC_NAME }}
            SetEnv AWS_SCRIPTS_GROUP_NAME=${{ secrets.AWS_SCRIPTS_GROUP_NAME }}
            SetEnv AWS_ADMIN_GROUP_NAME=${{ secrets.AWS_ADMIN_GROUP_NAME }}
            SetEnv AWS_FRONTEND_GROUP_NAME=${{ secrets.AWS_FRONTEND_GROUP_NAME }}
          END
        env:
          SSH_HOST: ${{ steps.ec2Data.outputs.PublicIpAddress }}
      
      - name: debug config
        run: cat ~/.ssh/config
              
      - name: Create ec2 instance connect
        run: aws ec2-instance-connect send-ssh-public-key --region ${{ secrets.AWS_REGION }} --instance-id ${{ steps.ec2Data.outputs.InstanceId }} --availability-zone ${{ steps.ec2Data.outputs.AvailabilityZone }} --instance-os-user ubuntu --ssh-public-key file://~/.ssh/ssh.key.pub
      
      - name: Connect to ssh
        run: ssh ec2instance 'export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"; sudo php /var/www/deploy/docker-images/aws/php/deploy.php'
 
#      - name: Connect to server and start deploy
#        run: |
#          ssh -T -o "StrictHostKeyChecking=no" -o "IdentitiesOnly=yes" -i ssh.key ubuntu@${{ steps.ec2Data.outputs.PublicIpAddress }} LocalCommand="sudo php /var/www/deploy/docker-images/aws/php/deploy.php"
        
